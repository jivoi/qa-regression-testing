Multi-Purpose Virtual Machine
-----------------------------

Often it is convenient to have a test server that various applications can
communicate with. For example, testing Thunderbird requires it communicate
with an smtp, pop and imap server. This documents setting up the applications
within a Hardy virtual machine (details of virtilization can be found
elsewhere).


----------
Networking
----------
Setup this host with a static IP address 192.168.122.2 on network
192.168.122.0/24 (the default in kvm). These network settings are assumed
throughout this document.

Adjust /etc/network/interfaces to have:
#auto eth0
#iface eth0 inet dhcp
auto eth0
iface eth0 inet static
	address 192.168.122.2
	netmask 255.255.255.0
	network 192.168.122.0
	broadcast 192.168.122.255
	gateway 192.168.122.1


-------------------
Hostname and Domain
-------------------
During install, use 'hardy-multi.example.com'. This hostname is assumed
throughout this document.

Make sure /etc/hosts has:
127.0.0.1 localhost
127.0.1.1 hardy-multi.example.com hardy-multi

Make sure /etc/hostname has:
hardy-multi


Host /etc/hosts
---------------
It is probably convenient to add to the host running this virtual machine the
following to /etc/hosts:

192.168.122.2	hardy-multi.example.com hardy-multi


-----
Email
-----
$ sudo tasksel install mail-server

Setup postfix up as an 'Internet Site' with a 'System mail name' of
'hardy-multi.example.com'.

Adjust /etc/postfix/main.cf have:
mydomain = example.com
mydestination = hardy-multi.example.com, localhost.example.com, $mydomain, localhost

Ensure this is present:
relayhost =
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128

Make sure /etc/mailname has:
hardy-multi.example.com

Results:
Postfix can now receive email for user@example.com
dovecot has a self-signed certificate and listens on 110, 143, 993, 995

Since this server is for testing, we want to enable plaintext logins too,
so adjust /etc/dovecot.conf to have:
disable_plaintext_auth = no

Clients will likely need to use TLS or SSL, as by default dovecot disables
plain text auth on 110 and 143.

*WARNING*
The self-signed certificate generated by ssl-cert only lasts one month on
Hardy. It can be regenerated with:
$ sudo make-ssl-cert generate-default-snakeoil --force-overwrite

You can also optionally do:
$ sudo cp /usr/sbin/make-ssl-cert /root

Then apply the following patch to /root/make-ssl-cert:
$ diff -Naur /usr/sbin/make-ssl-cert /root/make-ssl-cert
--- /usr/sbin/make-ssl-cert	2008-05-14 02:21:20.000000000 -0500
+++ /root/make-ssl-cert	2009-03-17 13:29:36.000000000 -0500
@@ -121,7 +121,7 @@
     cd $(dirname $output)
     ln -sf $(basename $output) $(openssl x509 -hash -noout -in $output)
 else
-    openssl req -config $TMPFILE -new -x509 -nodes \
+    openssl req -config $TMPFILE -new -x509 -nodes -days 3650 \
 	-out /etc/ssl/certs/ssl-cert-snakeoil.pem \
         -keyout /etc/ssl/private/ssl-cert-snakeoil.key > /dev/null 2>&1
     chmod 644 /etc/ssl/certs/ssl-cert-snakeoil.pem

Then do:
$ sudo /root/make-ssl-cert generate-default-snakeoil --force-overwrite
$ openssl x509 -text -in ./ssl-cert-snakeoil.pem | grep 'Not After'
            Not After : Mar 15 18:29:56 2019 GMT


NOTE:
If trying to test TLS, will need to make sure the client is resolvable in
the multipurpose VM. This is usually done by doing something like this in
/etc/hosts:
192.168.122.93  sec-hardy-i386

TLS
---
Adjust /etc/postfix/main.cf to have:
# TLS parameters
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

Clients: should be configured to use TLS (though since this is a snakeoil, they
will prompt to use the untrusted cert). Can check if it is being used with:
$ sudo tcpdump -s 0 -n -X -i eth0 port 25

SASL (smtp auth)
----------------
$ sudo apt-get install sasl2-bin

Add the sasl user:
$ sudo saslpasswd2 -c -u `postconf -h myhostname` testsasl

Using postconf in this way ensures that we give the proper value for the realm
(it needs to by 'myhostname'). Use 'sasldblistusers2' to list users and '-d' to
saslpasswd2 to delete users.

Move /etc/sasldb2 to the postfix chroot (otherwise get errors in syslog about
sasldb2 not being found):
$ sudo mv /etc/sasldb2 /var/spool/postfix/etc
$ sudo ln -s /var/spool/postfix/etc/sasldb2 /etc/sasldb2
$ ls -l /etc/sasldb2 /var/spool/postfix/etc/sasldb2
lrwxrwxrwx 1 root root    30 2010-06-09 11:47 /etc/sasldb2 -> /var/spool/postfix/etc/sasldb2
-rw-rw---- 1 root sasl 12288 2010-06-09 11:42 /var/spool/postfix/etc/sasldb2

Give access to /etc/sasldb2 to postfix:
$ sudo adduser postfix sasl
$ sudo /etc/init.d/postfix stop
$ sudo /etc/init.d/postfix start

Or, instead of the above, adjust the permissions on sasldb2 so postfix can
read it:
$ sudo chmod 640 /var/spool/postfix/etc/sasldb2
$ sudo chgrp postfix /var/spool/postfix/etc/sasldb2

Add to /etc/postfix/sasl/smtpd.conf
pwcheck_method: auxprop

Now add to main.cf:
# for sasl
smtpd_sasl_auth_enable = yes
broken_sasl_auth_clients = yes
smtpd_sasl_security_options = noanonymous

Note: the above does not enforce smtp auth. To do that, add/update main.cf to
have (the important part is permit_sasl_authenticated):
smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination, reject_unknown_recipient_domain

Testing:
Re-anble plaintext logins by commenting out smtpd_sasl_security_options and
reloading (uncomment it after testing!).  Then do:

$ apt-get install metamail hex

Then generate the base64 encoded password with:
$ printf "testsasl\0testsasl\0pass" | mimencode
dGVzdHNhc2wAdGVzdHNhc2wAcGFzcw==

Can verify it worked right with:
$ printf "dGVzdHNhc2wAdGVzdHNhc2wAcGFzcw==" | mimencode -u | hex
0x00000000: 74 65 73 74 73 61 73 6c - 00 74 65 73 74 73 61 73 testsasl@testsas
0x00000010: 6c 00 70 61 73 73       -                         l@pass

$ telnet hardy-multi.example.com 25
Trying 127.0.1.1...
Connected to hardy-multi.example.com.
Escape character is '^]'.
220 hardy-multi.example.com ESMTP Postfix (Ubuntu)
EHLO localhost
250-hardy-multi.example.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH PLAIN LOGIN DIGEST-MD5 NTLM CRAM-MD5
250-AUTH=PLAIN LOGIN DIGEST-MD5 NTLM CRAM-MD5
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN
AUTH PLAIN dGVzdHNhc2wAdGVzdHNhc2wAcGFzcw==
235 2.7.0 Authentication successful
quit
221 2.0.0 Bye
Connection closed by foreign host.

Default Email Accounts
----------------------
When testing mail clients or encryption ibraries (like NSS), it is convenient
to have multiple email accounts on the machine that you can access in different
ways.

POP/IMAP:
sudo adduser --shell /bin/false ubuntu-pop3tls
for i in pop3tls pop3s pop3 imaptls imaps imap; do
    sudo adduser --shell /bin/false ubuntu-$i
done

Username: ubuntu-pop3tls
Password: pop3tls
Username: ubuntu-pop3
Password: pop3
Username: ubuntu-pop3s
Password: pop3s
Username: ubuntu-imaptls
Password: imaptls
Username: ubuntu-imap
Password: imap
Username: ubuntu-imaps
Password: imaps

SMTP/AUTH:
for i in smtpauth-tls smtpauth ; do
    sudo saslpasswd2 -c -u `postconf -h myhostname` ubuntu-$i
done

Username: ubuntu-smtpauth-tls
Password: smtpauth-tls
Username: ubuntu-smtpauth
Password: smtpauth

Then add the following to /etc/aliases for some convenience accounts:
ubuntu: ubuntu-pop, ubuntu-imap
ubuntu-pop: ubuntu-pop3tls, ubuntu-pop3, ubuntu-pop3s
ubuntu-imap: ubuntu-imaptls, ubuntu-imap, ubuntu-imaps

So, typically can combine these:
pop3 with smtp
pop3s with smtpauth
pop3tls with smtpauth-tls
imap with smtp
imaps with smtpauth
imaptls with smtpauth-tls

--------
Kerberos
--------
Based in parts from:
http://www.alittletooquiet.net/text/kerberos-on-ubuntu/
/usr/share/doc/krb5-kdc/README.KDC
/usr/share/doc/krb5-kdc/README.Debian

$ sudo apt-get install ubuntu-standard krb5-kdc krb5-config openbsd-inetd krb5-admin-server krb5-user krb5-clients (krb5-clients is optional)

KDC Configuration
-----------------
Now adjust /etc/krb5.conf to have:
[libdefaults]
        default_realm = EXAMPLE.COM
        kdc_timesync = 1
        ccache_type = 4
        forwardable = true
        proxiable = true


[realms]
        EXAMPLE.COM = {
                kdc = hardy-multi
                admin_server = hardy-multi
        }

[domain_realm]
        .example.com = EXAMPLE.COM
        example.com = EXAMPLE.COM

[login]
        krb4_convert = false
        krb4_get_tickets = false

Now adjust /etc/krb5kdc/kdc.conf to use EXAMPLE.COM (may not be necessary):
...
[realms]
    EXAMPLE.COM = {
        ...


Create a database (likely done for you, but this makes sure everything is in
sync):
$ sudo sh -c 'rm /var/lib/krb5kdc/*' (make sure we start fresh)
$ sudo kdb5_util create -s
Loading random data
Initializing database '/var/lib/krb5kdc/principal' for realm 'EXAMPLE.COM',
master key name 'K/M@EXAMPLE.COM'
You will be prompted for the database Master Password.
It is important that you NOT FORGET this password.
Enter KDC database master key:              (I used 'pass')
Re-enter KDC database master key to verify:

Start the servers:
$ sudo /etc/init.d/krb5-kdc start
$ sudo /etc/init.d/krb5-admin-server start

krb5kdc and kadmind should now be started.


Principals
----------
Add an administrative principal remote administration:
$ sudo kadmin.local -q "addprinc admin/admin"
[type password] (I used 'pass')

Add a host principal for the kdc and kadmin servers:
$ sudo kadmin.local -p admin/admin
kadmin.local: addprinc -randkey host/hardy-multi.example.com
kadmin.local: ktadd host/hardy-multi.example.com
kadmin.local: quit

For host principal:
$ sudo kadmin.local -p admin/admin
kadmin.local: addprinc -randkey host/test-server.example.com
kadmin.local: quit

For user (I used 'foo' and 'pass'):
$ sudo kadmin.local -p admin/admin
kadmin.local: addprinc [username]
[type password]
kadmin.local: quit


Name Resolving
--------------
Note that it is very important that you use fully-qualified host names.
Kerberos does reverse DNS lookups to verify host names, and will not
authenticate your workstation if a reverse DNS lookup yields a hostname
different than the one you presented to it. If testing in kvm while using
libvirt/dnsmasq, then can add to /etc/hosts:

192.168.122.XXX         hardy-multi.example.com hardy-multi
192.168.122.YYY         test-server.example.com test-server

For all the machines that need the access. If remote clients see this when
running kinit:
kinit(v5): Cannot resolve network address for KDC in realm EXAMPLE.COM while getting initial credentials

Then make sure their /etc/hosts is setup (or DNS is working properly).


Realm Administration
--------------------
$ sudo kadmin.local -p admin/admin
(principal commands)
kadmin.local: addprinc ...
kadmin.local: delprinc ...
kadmin.local: modprinc ...
kadmin.local: list_principals
kadmin.local: list_policies
(keytab commands)
kadmin.local: ktadd ...
kadmin.local: ktremove ...
kadmin.local: ktadd -k /tmp/foo.keytab ...
kadmin.local: ktremove -k /tmp/foo.keytab ...

kadmin.local: ? (gets help)
kadmin.local: quit


Remote Login
------------
** WARNING this is unencrypted after login **

If you intend to login remotely using kerberos, you will need to explicitly
allow access to your account on the server. This should do the trick:

# su [username]
> echo [username]@[REALM] > ~/.k5login
> exit

This simply permits access to your UNIX account on the server to anyone who
authenticates to kerberos as your username.


Clients
-------
sudo apt-get install krb5-clients krb5-config krb5-user libpam-krb5

Edit krb5.conf and have it be the same as above.

Then do:
$ kinit username
$ kinit username@EXAMPLE.COM

If try the above on the kdc and get:
kinit(v5): Cannot contact any KDC for realm 'EXAMPLE.COM' while getting initial credentials

Make sure that the 127.0.x.x entry in /etc/hosts isn't being used as what is
defined in /etc/krb5.conf (Loopback address is not able to do kdc resolution, a
mapping from *REAL* ip address to the full qualified hostname is required to
get kadmin and kinit work)

For host keytabs, create a host principal as above on the KDC, then on the KDC
create a keytab with the host in it:

$ sudo kadmin.local
kadmin.local:  ktadd -k /tmp/foo.keytab host/sec-hardy-amd64.example.com

Now copy /tmp/foo.keytab to the host that will use it.


OpenLDAP and MIT Kerberos
-------------------------
Basically, the same as above, except do:

$ apt-get install krb5-config krb5-user libsasl2-modules-gssapi-mit

/etc/krb5.conf will just be the same as on the MIT server. Create the
principals with:

kadmin.local: addprinc ldapadmin
kadmin.local: addprinc -randkey ldap/sec-hardy-amd64.example.com
kadmin.local: ktadd -k /tmp/lapdkeytab ldap/sec-hardy-amd64.example.com

Then copy /tmp/lapdkeytab to /etc/krb5.keytab on the slapd server. Can
use a different file by using:

export KRB5_KTNAME=/etc/ldap/krb5.keytab (as above)


slapd.conf, is as above, with:
loglevel        384
...
sasl-host sec-hardy-amd64.example.com
sasl-realm EXAMPLE.COM
#sasl-secprops noplain,noanonymous,noactive,minssf=56
sasl-secprops noplain,noanonymous,minssf=56
saslRegexp
        uid=ldapadmin,cn=example.com,cn=gssapi,cn=auth
        uid=ldapadmin,cn=example.com,cn=gssapi,cn=auth
saslRegexp
        uid=(.*),cn=gssapi,cn=auth
        uid=$1,ou=Users,dc=example,dc=com

...
suffix          "dc=example,dc=com"
rootdn  "uid=ldapadmin,cn=example.com,cn=gssapi,cn=auth"


After all of this, can update /etc/ldap/ldap.conf to have:
BASE    dc=example,dc=com
URI     ldap://sec-hardy-amd64.example.com

and then do:
$ ldapwhoami
SASL/GSSAPI authentication started
SASL username: ldapadmin@EXAMPLE.COM
SASL SSF: 56
SASL data security layer installed.
dn:uid=ldapadmin,cn=example.com,cn=gssapi,cn=auth


Note, when not using kerberos, can do something like (use slappasswd):
rootdn   "cn=admin,dc=example,dc=com"
rootpw   {SSHA}RIwgsEIPiW0xul+JGPDnyKnaRMcmQ37M


-----
Bind9
-----

Caching Nameserver
------------------
$ sudo tasksel install dns-server

At this point, bind9 is a caching nameserver and will serve recursive queries.


Authoritative Zones
-------------------
Setup forward and reverse zones in /etc/bind/named.conf.local:
zone "example.com" IN {
    type master;
    file "/etc/bind/db.example.com";
    allow-transfer {
        127.0.0.1;
        192.168.122.0/24;
    };
};

zone "122.168.192.in-addr.arpa" IN {
    type master;
    file "/etc/bind/db.example.com.192.168.122";
    allow-transfer {
        127.0.0.1;
        192.168.122.0/24;
    };
};


Now create /etc/bind/db.example.com:
$TTL    604800
$ORIGIN example.com.
@               IN      SOA     ns1.example.com. hostmaster.example.com. (
                              1         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
                NS      ns1.example.com.
                MX      10 hardy-multi.example.com.

ns1             A       192.168.122.2
hardy-multi     A       192.168.122.2
$GENERATE 100-200 guest-$   A  192.168.122.$


Now create /etc/bind/db.example.com.192.168.122:
$TTL    604800
@       IN      SOA     example.com. root.localhost. (
                              1         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@       IN      NS      ns1.example.com.

; example network
2       IN      PTR     ns1.example.com.
2       IN      PTR     hardy-multi.example.com.
$GENERATE 100-200 $ PTR guest-$.example.com.


Now restart bind with:
$ sudo /etc/init.d/bind9 stop
$ sudo /etc/init.d/bind9 start


Check to see if it worked with:
$ host hardy-multi.example.com 127.0.0.1
Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases:

hardy-multi.example.com has address 192.168.122.2
$ host 192.168.122.2 127.0.0.1
Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases:

2.122.168.192.in-addr.arpa domain name pointer ns1.example.com.
2.122.168.192.in-addr.arpa domain name pointer hardy-multi.example.com.
$ dig @127.0.0.1 example.com -4 -t ANY

; <<>> DiG 9.4.2-P2 <<>> @127.0.0.1 example.com -4 -t ANY
; (1 server found)
;; global options:  printcmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 32787
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 2

;; QUESTION SECTION:
;example.com.                   IN      ANY

;; ANSWER SECTION:
example.com.            604800  IN      SOA     ns1.example.com. hostmaster.example.com. 12 604800 86400 2419200 604800
example.com.            604800  IN      NS      ns1.example.com.
example.com.            604800  IN      MX      10 hardy-multi.example.com.

;; ADDITIONAL SECTION:
ns1.example.com.        604800  IN      A       192.168.122.2
hardy-multi.example.com. 604800 IN      A       192.168.122.2

;; Query time: 1 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Thu Jan  8 15:43:26 2009
;; MSG SIZE  rcvd: 154


DNSSEC
------
TSIG (used for server to server communication):
$ sudo dnssec-keygen -a HMAC-MD5 -b 128 -n HOST multi-test
Kmulti-test.+157+55958

You should now have public and private TSIG keys in /etc/bind. Eg:
$ ls -l Kexample.com*
-rw-r--r-- 1 root bind 581 2009-01-08 15:55 Kexample.com.+003+32357.key
-rw------- 1 root bind 688 2009-01-08 15:55 Kexample.com.+003+32357.private

See the shared key with:
sudo cat ./Kmulti-test.+157+55958.key
multi-test. IN KEY 512 3 157 +ma1To8w2XBZx8F0cVYwEA==

Now create multi-test.keyfile (chmod 640 and root:bind):
key multi-test {
    algorithm hmac-md5;
    secret "+ma1To8w2XBZx8F0cVYwEA==";
};

And include this in named.conf.local before any zone files on all hosts using
the shared key:
include "/etc/bind/multi-test.keyfile";

# need on of these for each server
server 192.168.122.185 {
    keys { multi-test ; };
};

Then update the allow-transfer and allow-update sections, eg:
zone "example.com" IN {
    type master;
    file "/etc/bind/db.example.com.signed";
    allow-transfer {
        127.0.0.1;
        key multi-test;
        192.168.122.0/24;
    };
};

zone "122.168.192.in-addr.arpa" IN {
    type master;
    file "/etc/bind/db.example.com.192.168.122";
    allow-transfer {
        127.0.0.1;
        192.168.122.0/24;
        key multi-test;
    };
};

Can test TSIG with (can also use '-k multi-test.keyfile'). The following also
show the DNSSEC entries (see below):
$ dig @192.168.122.2 example.com. -t axfr -y multi-test:+ma1To8w2XBZx8F0cVYwEA==

; <<>> DiG 9.4.2-P2 <<>> @192.168.122.2 example.com. -t axfr -y multi-test:+ma1To8w2XBZx8F0cVYwEA==
; (1 server found)
;; global options:  printcmd
example.com.            604800  IN      SOA     ns1.example.com. hostmaster.example.com. 15 604800 86400 2419200 604800
example.com.            604800  IN      RRSIG   SOA 3 2 604800 20090207212308 20090108212308 32357 example.com. CH2rj15AKS1ZTSzJNdTeS4SQf4TRIEFmT5Wds2Nv6qnPswXkNkWB86A=
example.com.            604800  IN      NS      ns1.example.com.
example.com.            604800  IN      RRSIG   NS 3 2 604800 20090207212308 20090108212308 32357 example.com. CLTO/60bkUisr8AspNE+JeoRaisgmXlyG/GjFT/gD1V12xnEgIZ4H/Q=
example.com.            604800  IN      MX      10 hardy-multi.example.com.
example.com.            604800  IN      RRSIG   MX 3 2 604800 20090207212308 20090108212308 32357 example.com. CHzOraWjZnD2eyLqZ/4R6cgcBuyHCRza5gSIo6D7hryr4Vwu7iDoJ/w=
example.com.            604800  IN      NSEC    guest-100.example.com. NS SOA MX RRSIG NSEC DNSKEY
example.com.            604800  IN      RRSIG   NSEC 3 2 604800 20090207212308 20090108212308 32357 example.com. CC7qXFBm5fKy7IHOAmvm+JnXIk2fcZ7z06IC7qQ60ZdeHhUjzhgVhdg=
example.com.            604800  IN      DNSKEY  256 3 3 CMXo9e8Xc0tW9Ys6DvKkc2qnwmX7i15TAdXzZMavoMGlsa04hR55iBgu dpwFIRabfPtJtJ6qosLzJXs72fR7sTN/YnXqqmWifBsuhxzV98Dv+uHS 98QkezNVSjTStNQebU74pjVf6yJPTr2csl+m2efdUE1hQ1T+ivBkuoR+ FZPH6zF+Z3l3wbLCS0jIxHJe4Bh5M80S51p/41ktPtL7tso/IzNITEVi mI4cODjEtR5M52YX3xTo835+cztEmGokXGbqC8fz7BJ904asuxyJY2mB d8hiFdsH3rZQnouH/XaVhWAOVwP5BC7Q9V/+GaBRr5/qZmHTQvGoCz4r cm6szmOTzNiiz3TCLoxwVB9ajbVMVXd2lVJHtAAD4HFKmJP4wmjh5Hl2 Hpt9mjaz4irIK69yW+4RKGxTHAFPb7K1aYqPjmfBDLVDNg5+HoSKQ8oA 5lEmdxZlY7ApA+qkuPsrapa5IiIPgqCREZ8uZ4A0HoEgfQQPloO6wayI KVrPllZ1WHg+d5zR8ifeFWBfVHPBCDEgJeaE
example.com.            604800  IN      RRSIG   DNSKEY 3 2 604800 20090207212308 20090108212308 32357 example.com. CIwJP/tNCV3jdlAYcuCvJ1dYJUdewMJO2PTeIYvztDRKWqMB1rsQfSo=
guest-100.example.com.  604800  IN      A       192.168.122.100
guest-100.example.com.  604800  IN      RRSIG   A 3 3 604800 20090207212308 20090108212308 32357 example.com. CB54Ke34whrDIEzqtjOlqWQrM7i1ekbdPd1dWlOpPDE3/RVuslt4aKo=
guest-100.example.com.  604800  IN      NSEC    guest-101.example.com. A RRSIG NSEC
guest-100.example.com.  604800  IN      RRSIG   NSEC 3 3 604800 20090207212308 20090108212308 32357 example.com. CEXAZ0zeo5BvDxuPz7nDCaX5CI2ANif6kHfBJdnnzRkndkwJFoY+TTI=
...
example.com.            604800  IN      SOA     ns1.example.com. hostmaster.example.com. 15 604800 86400 2419200 604800
multi-test.             0       ANY     TSIG    hmac-md5.sig-alg.reg.int. 1231454334 300 16 HQiVtZc8KWPibCL1kDVPog== 35427 NOERROR 0 
;; Query time: 53 msec
;; SERVER: 192.168.122.2#53(192.168.122.2)
;; WHEN: Thu Jan  8 16:38:56 2009
;; XFR size: 427 records (messages 1, bytes 26075)


Signed zones:
$ cd /etc/bind
$ sudo dnssec-keygen -a DSA -b 1024 -n ZONE example.com.

You should now have public and private keys in /etc/bind. Eg:
$ ls -l Kexample.com*
-rw-r--r-- 1 root bind 581 2009-01-08 15:55 Kexample.com.+003+32357.key
-rw------- 1 root bind 688 2009-01-08 15:55 Kexample.com.+003+32357.private

Have our /etc/bind/db.example.com zone file include the public key with:
$INCLUDE /etc/bind/Kexample.com.+003+32357.key

Now sign the zone with (use '-p' for pseudo random, otherwise this will take a
while):
$ sudo dnssec-signzone -p -o example.com. db.example.com

This created /etc/bind/db.example.com.signed. Update /etc/bind/named.conf.local
to use the signed file instead:
zone "example.com" IN {
    type master;
    file "/etc/bind/db.example.com.signed";
    allow-transfer { 127.0.0.1; 192.168.122.0/24; };
};

And reload bind:
$ sudo rndc reload

Should see in /var/log/daemon.log something like:
Jan  8 16:19:22 hardy-multi named[5117]: zone example.com/IN: loaded serial 12 (signed)


If update /etc/bind/db.example.com, then do so, resign and reload bind:
$ sudo dnssec-signzone -p -o example.com. -f db.example.com.signed.new db.example.com
$ sudo mv db.example.com.signed db.example.com.signed.old
$ sudo mv db.example.com.signed.new db.example.com.signed
$ sudo rndc reload


Dynamic updates
---------------
$ dnssec-keygen -a hmac-md5 -b 128 -n USER dhcpupdate
Kdhcpupdate.+157+35153

This will create a 128bit HMAC-MD5 keyfile called dhcpupdate.

The output is the file prefix. If you do ls Kdhcpupdate* you will see two
files. Looking at the .key file:
dhcpupdate. IN KEY 0 3 157 N8Hk2RUFO84bEVl3uGTD2A==

Now add create /etc/bind/dhcpupdate.keyfile (root:bind 640):
key dhcpupdate {
  algorithm hmac-md5;
  secret "r+Jt1VRINsb5IiT3JYaZTQ==";
};

and add to named.conf.local:
include "/etc/bind/dhcpupdate.keyfile";

And then add the example.net zones:
zone "example.net" IN {
    type master;
    file "/var/lib/bind/db.example.net";
    allow-transfer {
        127.0.0.1;
    };
    allow-update { key dhcpupdate; };
};

zone "123.168.192.in-addr.arpa" IN {
    type master;
    file "/var/lib/bind/db.example.net.192.168.123";
    allow-transfer {
        127.0.0.1;
    };
    allow-update { key dhcpupdate; };
};

Now create the db files:
$ cat /var/lib/bind/db.example.net
$TTL    604800
$ORIGIN example.net.
@               IN      SOA     ns2.example.net. hostmaster.example.net. (
                             17         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
                NS      ns2.example.net.
                MX      10 hardy-multi.example.com.

ns2             A       192.168.123.2
test1           A       192.168.123.2

$ cat /var/lib/bind/db.example.net.192.168.123
$TTL    604800
@       IN      SOA     example.net. root.localhost. (
                              4         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@       IN      NS      ns2.example.net.

; example network
2       IN      PTR     ns2.example.net.
2       IN      PTR     test1.example.net.


And restart the server (rndc reload is not enough):
$ sudo /etc/init.d/bind9 stop
$ sudo /etc/init.d/bind9 start

Test if the static names work:
$ host test1.example.net 127.0.0.1
Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases: 

test1.example.net has address 192.168.123.2
$ host 192.168.123.2 127.0.0.1
Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases: 

2.123.168.192.in-addr.arpa domain name pointer test1.example.net.
2.123.168.192.in-addr.arpa domain name pointer ns2.example.net.

As dynamic updates are added, they will be added to:
/var/lib/bind/db.example.net.jnl
/var/lib/bind/db.example.net.192.168.123.jnl

From http://www.bind9.net/manual/bind/9.3.1/Bv9ARM.ch04.html:
The zone files of dynamic zones cannot normally be edited by hand because they
are not guaranteed to contain the most recent dynamic changes - those are only
in the journal file. The only way to ensure that the zone file of a dynamic
zone is up to date is to run 'rndc stop'.

If you have to make changes to a dynamic zone manually, the following procedure
will work: Disable dynamic updates to the zone using 'rndc freeze <zone>'. This
will also remove the zone's .jnl file and update the master file. Edit the zone
file. Run 'rndc unfreeze <zone>' to reload the changed zone and re-enable
dynamic updates.


-----------
DHCP Server
-----------
Testing dhcp with VMs may not work depending on how the VMs acquire IP
addresses. The easiest thing to do is to use NAT with dnsmasq, then run on the
host:
$ sudo iptables -I INPUT -p udp --dport 67 -j REJECT

This will prevent the host machine from giving out IP addresses to any VMs on
the 192.168.122.0/24 network.

$ sudo apt-get install dhcp3-server

Dynamic Updates
---------------
This is going to assume 192.168.123.0/24 network as defined in the Bind9
section, above.

Update /etc/dhcp3/dhcpd.conf to have:
ddns-update-style interim;
key dhcpupdate {
  algorithm hmac-md5;
  secret r+Jt1VRINsb5IiT3JYaZTQ==;
}

# forward zone server and key to use
zone example.net {
  primary 127.0.0.1;
  key dhcpupdate;
}

# reverse zone server and key to use
zone 10.168.192.in-addr.arpa {
  primary 127.0.0.1;
  key dhcpupdate;
}

option domain-name "example.net";
option domain-name-servers ns1.example.com, ns2.example.net;

default-lease-time 600;
max-lease-time 7200;

authoritative;
log-facility daemon;

subnet 192.168.0.0 netmask 255.255.0.0 {
        range 192.168.123.133 192.168.123.254;
        option broadcast-address 192.168.123.255;

        option routers 192.168.122.1;
        option domain-name-servers 192.168.122.2;

        # ddns -- use client supplied FQDN if exists, otherwise, use client
        # supplied host-name, otherwise create it ourselves
        ddns-hostname = pick (option fqdn.hostname, option host-name, concat ("dhcp", binary-to-ascii (10, 8, "-", suffix(leased-address,1))));
}

The above will allow the dhcpd server to listen on an interface with a
192.168.122.x IP, but hand out one for 192.168.123.0/24. Note that the client
will not be able to contact the 192.168.122.0/24 network. (TODO: make this
work better).

Now clients that give a hostname will be added to bind dynamically:
$ host sec-jaunty-amd64.example.net 127.0.0.1
Using domain server:
Name: 127.0.0.1
Address: 127.0.0.1#53
Aliases: 

sec-jaunty-amd64.example.net has address 192.168.123.133


-------------------
IRC Server (IRCnet)
-------------------
No chanserv or nickserv.
http://ircnet.irchelp.org/

$ sudo apt-get install ircd-irc2

Edit /etc/ircd/ircd.conf:
# M-Line
M:irc.hardy-multi::Debian ircd default configuration::000A

# A-Line
A:This is Debian's default ircd configurations:Please edit your /etc/ircd/ircd.conf file:Contact <root@hardy-multi> for questions::hardy-multi

# Y-Lines
Y:1:90::100:512000:5.5:100.100
Y:2:90::300:512000:5.5:250.250

# I-Line
#I:*:::0:1
I:192.168.122.*::*::1

# P-Line
P::::6667:

# let anyone who knows the pass become operator (/oper op)
O:192.168.122.0/24:$1$3dr$hq95qLef.L0bJxTPjhrXS0:op::1:A:
O:192.168.122.0/24:$1$3dr$hq95qLef.L0bJxTPjhrXS0:localop::1:L:

See /usr/share/doc/ircd-irc2/INSTALL.gz and
/usr/share/doc/ircd-irc2/ircd.conf.example.gz for more information

Use 'chkconf' to verify the configuration file.

Clients simply connect to hardy-multi:6667 to have it work

Don't get ops on #channel, but rather &channel (see
http://ircnet.irchelp.org/channel.html). So if testing /kick, /list, /ban,
/mode, /names, /wall, /NOTICE &WALLOPS, etc, use a local channel.

IRC-SSL via stunnel
-------------------
$ sudo apt-get install stunnel4

For now, use the snakeoil cert and adjust /etc/stunnel/stunnel.conf to have:
cert = /etc/ssl/certs/ssl-cert-snakeoil.pem
key = /etc/ssl/private/ssl-cert-snakeoil.key
; Protocol version (all, SSLv2, SSLv3, TLSv1)
sslVersion = SSLv3
...
[irc]
accept = 6697
connect = 6667


All other are defaults, but be sure to also comment out all other services
besides [irc], otherwise stunnel won't start.

Adjust /etc/default/stunnel4 to have:
ENABLED=1

$ sudo /etc/init.d/stunnel4 stop
$ sudo /etc/init.d/stunnel4 start
Starting SSL tunnels: [Started: /etc/stunnel/stunnel.conf] stunnel.

$ sudo netstat -atuvpn |grep 66
jamie@hardy-multi:~$ sudo netstat -atuvpn |grep 66
tcp        0      0 0.0.0.0:6697            0.0.0.0:*               LISTEN      4638/stunnel4
tcp        0      0 0.0.0.0:6667            0.0.0.0:*               LISTEN      4166/ircd
...

Now will have to adjust ircd to accept connections from the localhost (since
that is where stunnel4 connects from). Adjust /etc/ircd/ircd.conf to have
(these are just like above, but with 127.* addresses):
I:127.*.*.*::*::1
O:127.0.0.0/8:$1$3dr$hq95qLef.L0bJxTPjhrXS0:op::1:A:
O:127.0.0.0/8/24:$1$3dr$hq95qLef.L0bJxTPjhrXS0:localop::1:L:


Clients
-------
Irssi (until a recent security update), could only connect with sslv2.

/server add -network m multi-hardy-amd64 6667
/connect multi-hardy-amd64

or with SSL:
/server add -ssl -network ms multi-hardy-amd64 6697
/connect multi-hardy-amd64

or with SSL, with verification (needs more than just snakeoil):
/server add -ssl -ssl_verify -network ms multi-hardy-amd64 6697
/connect multi-hardy-amd64


CTCP basic:
http://www.irchelp.org/irchelp/irctutorial.html

/CTCP <channel> ping

Eg:
/CTCP #foo ping

or:
/CTCP <nick> ping


-----
iSCSI
-----

Server (target)
---------------
Create a disk:
$ sudo dd if=/dev/zero of=/srv/iscsi.image.0 bs=1 seek=10M count=1

Adjust /etc/ietd.conf (man ietd.conf) to have (commenting out the example
entry):
# for discovery (Incoming and Outgoing must be different)
IncomingUser ubuntu passwd
OutgoingUser ubuntu ubuntupasswd
Target iqn.2009-10.com.example.hardy-multi:iscsi-01
        # for session (Incoming and Outgoing must be different)
	IncomingUser ubuntu passwd
        OutgoingUser ubuntu ubuntupasswd
	Lun 0 Path=/srv/iscsi.image.0,Type=fileio

Adjust /etc/initiators.allow to have (only if /etc/initiators.deny has
'ALL ALL'):
iqn.2009-10.com.example.hardy-multi:iscsi-01 ALL

$ sudo /etc/init.d/iscsitarget restart

Verify:
$ cat /proc/net/iet/volume
tid:1 name:iqn.2009-10.com.example.hardy-multi:iscsi-01
	lun:0 state:0 iotype:fileio iomode:wt path:/srv/iscsi.image.0
$ cat /proc/net/iet/session
tid:1 name:iqn.2009-10.com.example.hardy-multi:iscsi-01


Client (initiator)
------------------
Adjust /etc/iscsi/initiatorname.iscsi to include:
InitiatorName=iqn.2009-10.com.example.hardy-multi:iscsi-01
InitiatorAlias=ubuntu

Adjust /etc/iscsi/iscsid.conf to have:
node.session.auth.authmethod = CHAP
node.session.auth.username = ubuntu
node.session.auth.password = passwd
node.session.auth.username_in = ubuntu
node.session.auth.password_in = ubuntupasswd

discovery.sendtargets.auth.authmethod = CHAP
discovery.sendtargets.auth.username = ubuntu
discovery.sendtargets.auth.password = passwd
discovery.sendtargets.auth.username_in = ubuntu
discovery.sendtargets.auth.password_in = ubuntupasswd


$ sudo iscsiadm -m discovery -t sendtargets -p 192.168.122.2
192.168.122.2:3260,1 iqn.2009-10.com.example.hardy-multi:iscsi-01
$ sudo iscsiadm -m discovery -t sendtargets -p 192.168.122.2 -P 1
    Target: iqn.2009-10.com.example.hardy-multi:iscsi-01
        Portal: 192.168.122.2:3260,1
           Iface Name: default

To login:
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --login
$ dmesg
...
[    0.000000] scsi14 : iSCSI Initiator over TCP/IP
[    0.000000] scsi 14:0:0:0: Direct-Access     IET      VIRTUAL-DISK     0    PQ: 0 ANSI: 4
[    0.000000] sd 14:0:0:0: [sdb] 20480 512-byte hardware sectors (10 MB)
[    0.000000] sd 14:0:0:0: [sdb] Write Protect is off
[    0.000000] sd 14:0:0:0: [sdb] Mode Sense: 77 00 00 08
[    0.000000] sd 14:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn't support DPO or FUA
[    0.000000] sd 14:0:0:0: [sdb] 20480 512-byte hardware sectors (10 MB)
[    0.000000] sd 14:0:0:0: [sdb] Write Protect is off
[    0.000000] sd 14:0:0:0: [sdb] Mode Sense: 77 00 00 08
[    0.000000] sd 14:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn't support DPO or FUA
[    0.000000]  sdb: unknown partition table
[    0.000000] sd 14:0:0:0: [sdb] Attached SCSI disk
[    0.000000] sd 14:0:0:0: Attached scsi generic sg2 type 0

$ sudo fdisk -l
...
Disk /dev/sdb: 10 MB, 10485760 bytes
1 heads, 20 sectors/track, 1024 cylinders
Units = cylinders of 20 * 512 = 10240 bytes
Disk identifier: 0x00000000

Disk /dev/sdb doesn't contain a valid partition table

To logout:
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --logout


To have the initiator setup the target automatically (may not be needed if
setup /etc/iscsi/iscsid.conf to have from the start 'node.startup = automatic'.
I did set this up to this after though):
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --op=update --name node.startup --value=automatic
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --op=update --name node.conn[0].startup --value=automatic

$ sudo /etc/init.d/open-iscsi restart
 * Disconnecting iSCSI targets                                        [ OK ]
 * Stopping iSCSI initiator service                                   [ OK ]
 * Starting iSCSI initiator service iscsid                            [ OK ]
 * Setting up iSCSI targets                                           [ OK ]

$ sudo fdisk -l
...
Disk /dev/sdb: 10 MB, 10485760 bytes
1 heads, 20 sectors/track, 1024 cylinders
Units = cylinders of 20 * 512 = 10240 bytes
Disk identifier: 0x00000000

Disk /dev/sdb doesn't contain a valid partition table

Can convert those back to manual with:
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --op=update --name node.startup --value=manual
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --op=update --name node.conn[0].startup --value=manual
$ sudo iscsiadm -m node --targetname "iqn.2009-10.com.example.hardy-multi:iscsi-01" -p "192.168.122.2:3260" --logout
$ sudo /etc/init.d/open-iscsi restart


You can see various values in the nodes file:
$ cat  /etc/iscsi/nodes/iqn.2009-10.com.example.hardy-multi:iscsi-01/192.168.122.2,3260,1/default
node.name = iqn.2009-10.com.example.hardy-multi:iscsi-01
node.tpgt = 1
node.startup = automatic
iface.hwaddress = default
iface.iscsi_ifacename = default
iface.net_ifacename = default
iface.transport_name = tcp
node.discovery_address = 192.168.122.2
node.discovery_port = 3260
node.discovery_type = send_targets
node.session.initial_cmdsn = 0
node.session.initial_login_retry_max = 4
node.session.cmds_max = 128
node.session.queue_depth = 32
node.session.auth.authmethod = CHAP
node.session.auth.username = ubuntu
node.session.auth.password = passwd
node.session.auth.username_in = ubuntu
node.session.auth.password_in = ubuntupasswd
node.session.timeo.replacement_timeout = 120
node.session.err_timeo.abort_timeout = 10
node.session.err_timeo.reset_timeout = 30
node.session.iscsi.InitialR2T = No
node.session.iscsi.ImmediateData = Yes
node.session.iscsi.FirstBurstLength = 262144
node.session.iscsi.MaxBurstLength = 16776192
node.session.iscsi.DefaultTime2Retain = 0
node.session.iscsi.DefaultTime2Wait = 0
node.session.iscsi.MaxConnections = 1
node.session.iscsi.MaxOutstandingR2T = 1
node.session.iscsi.ERL = 0
node.conn[0].address = 192.168.122.2
node.conn[0].port = 3260
node.conn[0].startup = automatic
node.conn[0].tcp.window_size = 524288
node.conn[0].tcp.type_of_service = 0
node.conn[0].timeo.logout_timeout = 15
node.conn[0].timeo.login_timeout = 15
node.conn[0].timeo.auth_timeout = 45
node.conn[0].timeo.active_timeout = 5
node.conn[0].timeo.idle_timeout = 60
node.conn[0].timeo.ping_timeout = 5
node.conn[0].timeo.noop_out_interval = 10
node.conn[0].timeo.noop_out_timeout = 15
node.conn[0].iscsi.MaxRecvDataSegmentLength = 131072
node.conn[0].iscsi.HeaderDigest = None,CRC32C
node.conn[0].iscsi.DataDigest = None
node.conn[0].iscsi.IFMarker = No
node.conn[0].iscsi.OFMarker = No


---------------------
AOE (ATAOverEthernet)
---------------------
https://help.ubuntu.com/community/ATAOverEthernet
http://support.coraid.com/support/linux/EtherDrive-2.6-HOWTO.html

Server
------
$ sudo apt-get install vblade (need at least vblade_14-1ubuntu1.1 on hardy)

Create a disk:
$ sudo dd if=/dev/zero of=/srv/vblade.0 bs=1 seek=10M count=1

Start the vblade (stays in foreground. use vbladed for daemon):
$ sudo vblade 1 1 eth0 /srv/vblade.0
pid 11355: e1.1, 20480 sectors O_RDWR

Devices can come up on boot by adjusting /etc/vblade.conf. To test on the
local server, then tell vblade to use 'lo' instead of 'eth0'.


Client
------
http://support.coraid.com/support/linux/EtherDrive-2.6-HOWTO-5.html

$ sudo apt-get install aoetools

Create /etc/udev/rules.d/60-aoe.rules to have (not required in 9.04 and
higher, see https://launchpad.net/bugs/234033):
SUBSYSTEM=="aoe", NAME="etherd/%k", GROUP="disk", MODE="0220"
SUBSYSTEM=="aoe", KERNEL=="err", MODE="0440"

$ sudo /etc/init.d/udev restart (may need to reboot)
$ sudo modprobe aoe

Or optionally:
$ sudo modprobe aoe aoe_iflist="eth0"
$ sudo aoe-interfaces eth0

$ sudo aoe-discover
$ sudo aoe-stat
      e1.1         0.010GB   eth0 up

Now can use the device like normal:
$ sudo mke2fs -j /dev/etherd/e1.1
$ sudo mkdir /mnt/e1.1
$ sudo mount /dev/etherd/e1.1 /mnt/e1.1

If the AoE device disappears or changes size use the aoe-revalidate command:
$ sudo aoe-revalidate e1.1

Alternatively, you can re-load the aoe module completely:
$ sudo rmmod aoe
$ sudo modprobe aoe

Note that if you partition the /dev/etherd/e1.1 device to have a partition,
the partition shows up as /dev/etherd/e1.1p1.


-----
Samba
-----
This sets up samba to allow usershares. It requires samba 3.0.23.
http://samba.org/samba/docs/man/manpages-3/net.8.html and see USERSHARE
$ sudo apt-get install samba

Adjust /etc/samba/smb.conf to have:
usershare allow guests = yes

Make sure you are in the sambashare group
$ sudo adduser jamie sambashare (logout and back in)

Then create the share:
$ mkdir $HOME/foobar
$ net usershare add foobar $HOME/foobar 'test share' 'Everyone:F' guest_ok=y
$ smbclient -N -L localhost | grep foobar
...
	foobar          Disk      test share


To delete it:
$ net usershare delete foobar


To get info on it:
$ net usershare info foobar


To change it, just use 'add' with the same share name.

See 'man 8 net' for details.


-----
NFSv3
-----

Remember:
1. access based on hostname or IP address (can spoof or DoS someone)
2. access controls based on DAC with uid and gid supplied by the client
3. secure option means nothing for clients owned by users
4. uses udp (by default), which is easier to spoof


Server
------
$ sudo apt-get install nfs-kernel-server
$ sudo mkdir /srv/nfsv3
$ sudo touch /srv/nfsv3/hello_world

Update /etc/exports to have:
/srv/nfsv3	192.168.122.0/24(rw,sync,no_subtree_check)

$ sudo exportfs -r
$ showmount -e
Export list for hardy-multi:
/srv/nfsv3 192.168.122.0/24

Client
------
$ sudo apt-get install nfs-common
$ sudo dpkg-reconfigure portmap (should be bound to local interface)

Mount with:
$ sudo mkdir /srv/hardy-multi
$ sudo mount -t nfs 192.168.122.2:/srv/nfsv3 /srv/hardy-multi
or:
$ sudo mount -t nfs -o rsize=8192,wsize=8192,rw,hard,intr,udp,nfsvers=3,nodev,nosuid 192.168.122.2:/srv/nfsv3 /srv/hardy-multi
$ ls /srv/hardy-multi/
hello_world

Tips:
Keep in mind, most mounts should use hard, intr and bg because these options
best preserve NFS's original design goals. Also 'soft' has a lot of potential
for data loss and should only be used on ro exports.

If using TCP, have rsize and wsize be 32768.

If using UDP and on the same network, have rsize and wsize by 8192 and make
sure any firewalls allows fragments, since 8192 is larger than the MTU.


-------
Apache2
-------
This will install apache2 for regular static pages as well as ssl, and php5.

$ sudo apt-get install apache2-mpm-prefork libapache2-mod-php5 libapache2-mod-bt
$ sudo a2enmod php5
$ sudo a2enmod ssl
$ sudo a2enmod bt

Depending on other modules that are installed, may want to adjust
/etc/apache2/sites-available/default from:
NameVirtualHost *
<VirtualHost *>

to:
NameVirtualHost *:80
<VirtualHost *:80>

$ sudo /etc/init.d/apache2 force-reload


------------------
Bittorrent Tracker
------------------
mod_bt does only the peers and index and provides the core infrastructure for
a tracker, but doesn't provide the tools for uploading, etc. It also doesn't
seem to work well with transmission.

A GPL2 software that isn't in the archive is RivetTracker:
http://www.rivetcode.com/software/rivettracker/

First install Apache2 (as above). Then install php5-mysql and reload apache
with:
$ sudo /etc/init.d/apache2 force-reload

Install in a hardy VM is (this is not secure):

$ cd /var/www
$ sudo tar -zxvf rivettracker_1-0.tar.gz
$ sudo chown -R www-data:www-data ./rivettracker

Then point the browser to:
http://hardy-multi.example.com

This will create /var/www/rivettracker/config.php. Eg:
<?php //Please do NOT edit this file, use the admin page for changes.
$GLOBALS['hiddentracker'] = false;
$GLOBALS['scrape'] = true;
$GLOBALS['report_interval'] = 1800;
$GLOBALS['min_interval'] = 300;
$GLOBALS['maxpeers'] = 50;
$GLOBALS['NAT'] = false;
$GLOBALS['persist'] = false;
$GLOBALS['ip_override'] = false;
$GLOBALS['countbytes'] = true;
$upload_username = 'upload';
$upload_password = 'f08d7c287c822a36ca35d23ca0ca3f31';
$admin_username = 'admin';
$admin_password = 'f6fdffe48c908deb0f4c3bd36c032e72';
$GLOBALS['title'] = '';
$dbhost = '127.0.0.1';
$dbuser = 'rivet';
$dbpass = 'rivet';
$database = 'rivet';
$enablerss = true;
$rss_title = '';
$rss_link = '';
$rss_description = '';
$website_url = 'http://hardy-multi.example.com';
$GLOBALS['max_upload_rate'] = 100;
$GLOBALS['max_uploads'] = 5;
$timezone = '+0000';
$prefix = '';
?>

Note that at this point, install.php should be removed and the other files
not owned or writable by www-data.

Will need to run the following mysql command as well:
$ mysql -u root -p
...
mysql> grant select, update, insert, delete on tracker.* to rivet@localhost identified by 'rivet';
...
mysql> quit

Now can navigate to http://hardy-multi.example.com/rivettracker/index.php

When creating torrents, use this for the announce URL:
http://hardy-multi.example.com/rivettracker/announce.php


Bittorent protocol overview
---------------------------
A tracker will host on index of torrents and the people who provide them.
You make the torrent available to others by:
1. creating a torrent with the proper announcement URL
2. registering the torrent with a tracker (uploading the torrent)
3. announcing the torrent via a tracker (this is called seeding)

Others need to get the torrent in some way. Proper trackers allow downloading
of the torrent from the tracker web service. You can also disseminate the
torrent via other means (eg scp).

Once a torrent is announced, others can obtain the torrent and check with the
tracker for announcements by any seeds. If there are seeds for the torrent, a
peer (downloader, or 'leech' if the downloader doesn't allow downloads) can
then contact the seed and start downloading parts of the file.  The more seeds
there are, the more parts of the file a peer can download at once. Once the
files are downloaded, the downloader can then become a seeder. This is the
essence of P2P.

The torrent is essentially a listing of the files that are to be downloaded,
but contains no files itself. The torrent typically also has the announcement
URL inside the torrent.

Creating a torrent is easy. However, each tracker service has a different
method for registering torrents, with different URLs for announcing the torrent
and different ports for registering and announcing. Bittorrent is notoriously
picky about NAT and firewalls, but some services have ways around that. Port
51413 (both UDP and TCP) is used for P2P.

There is a lot more, but if using RivetTracker as above you can test various
bittorrent clients (see below) by simply scp'ing the torrents and opening
them with the client. One client will need to seed the tracker as well for
the torrents to be downloadable.


Bittorrent clients
------------------
Transmission can create the torrents, but on Karmic and Jaunty can't seed them
directly (ie with 'Download' unchecked) because it adds junk to the end of the
GET request on uploads. Transmission can download just fine and if the file
already exists on the disk it can become a seeder (eg create good.torrent
with a file or directory on disk using transmission, then open this new
torrent in transmission-- it will notice it has the files and can then be a
seeder if there are no other seeders).

Deluge seems to be able to create and seed/upload the torrent just fine.


----------------
SSL CERTIFICATES
----------------
Many of the above use the snakeoil certificate. If testing requires the use
of a trusted certificate, then can create a local certificate authority (CA)
with client certificates. One way to do this is by using make-ca.sh from
scripts/gnutls/test-ca

Eg:
$ sudo apt-get install gnutls-bin
$ $QRT/scripts/gnutls/test-ca/make-ca.sh hardy-multi.example.com sec-hardy-amd64.example.com sec-hardy-i386.example.com
...
SUCCESS
$ ls -1 '/tmp/test-ca'/*.pem
/tmp/test-ca/hardy-multi.example.com-key.pem
/tmp/test-ca/hardy-multi.example.com.pem
/tmp/test-ca/hardy-multi.example.com-tls-key.pem
/tmp/test-ca/hardy-multi.example.com-tls.pem
/tmp/test-ca/sec-hardy-amd64.example.com-key.pem
/tmp/test-ca/sec-hardy-amd64.example.com.pem
/tmp/test-ca/sec-hardy-amd64.example.com-tls-key.pem
/tmp/test-ca/sec-hardy-amd64.example.com-tls.pem
/tmp/test-ca/sec-hardy-i386.example.com-key.pem
/tmp/test-ca/sec-hardy-i386.example.com.pem
/tmp/test-ca/sec-hardy-i386.example.com-tls-key.pem
/tmp/test-ca/sec-hardy-i386.example.com-tls.pem
/tmp/test-ca/test-ca-key.pem
/tmp/test-ca/test-ca.pem

Now copy the certificates and test-ca.pem into place and configure the
applications to use them. Eg, for dovecot, might do:
$ sudo mkdir /etc/test-ca
$ sudo cp -p /tmp/test-ca/*pem /etc/test-ca

Adjust /etc/dovecot/dovecot.conf to have:
ssl_cert_file = /etc/test-ca/hardy-multi.example.com.pem
ssl_key_file = /etc/test-ca/hardy-multi.example.com-key.pem
ssl_ca_file = /etc/test-ca/test-ca.pem

IMPORTANT: the server and clients must be resolvable via DNS. The easiest
way to do this is to add the hosts to all the /etc/hosts files. If using
dnsmasq and have /etc/resolv.conf configured to point to 192.168.122.1 on
your host, then you can add the entries to only your host's /etc/hosts
file (may require dnsmasq restart).


-------------
Jabber Server
-------------
Based on:
http://library.linode.com/communications/xmpp/ejabberd/ubuntu-9.04-jaunty

Installing
----------
sudo apt-get install ejabberd

Configuring
-----------
Edit /etc/ejabberd/ejabberd.cfg to have:
hardy-multi

%% Admin user
{acl, admin, {user, "", "localhost"}}.
{acl, admin, {user, "admin", "hardy-multi.example.com"}}.

%% Hostname
{hosts, ["localhost", "hardy-multi.example.com"]}.

%% In band registration:
{access, register, [{allow, all}]}.

% SSL-enabled client-2-server service
{5223, ejabberd_c2s,     [{access, c2s},
                            {max_stanza_size, 65536},
                            tls, {certfile, "/etc/ejabberd/ejabberd.pem"},
                            {shaper, c2s_shaper}]},

"The ejabberd.cfg file is complete and well commented, and from this point
forward your server should run. However, you should take the time to become
familiar with the options provided in this file.

By default, MUCs or Multi-User-Chats (chatrooms) are accessible on the
"conference.[hostname]" sub-domain. If you want the public to be able to access
MUCs on your domain, you need to create an "A Record" pointing the conference
hostname (eg. subdomain) to the IP address where the ejabberd instance is
running."



Users
-----
Adding users:
$ sudo ejabberdctl register admin hardy-multi.example.com admin
$ sudo ejabberdctl register test1 hardy-multi.example.com pass
$ sudo ejabberdctl register test2 hardy-multi.example.com pass

This creates the following users:
admin@hardy-multi.example.com
test1@hardy-multi.example.com
test2@hardy-multi.example.com

Also a web interface at:
http://hardy-multi.example.com:5280/admin/

Login: admin@hardy-multi.example.com
Pass: admin (need to register this user, as above)
(need to register this user, as above)

Removing users:
$ sudo ejabberdctl unregister test1 hardy-multi.example.com

Changing password:
$ sudo ejabberdctl set-password test2 example.com newpass

Backup the database:
$ sudo ejabberdctl dump ejabberd-backup.db

Restore the database:
$ sudo ejabberdctl load ejabberd-backup.db


XMPP Federation and DNS
-----------------------
Need SRV records in DNS. Not required for this setup. However, clients
connecting will need to be able to resolve hardy-multi.example.com.

